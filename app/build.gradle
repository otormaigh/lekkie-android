/*
 * Copyright (C) 2018 Elliot Tormey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import lekkie.*

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
if (file('../enc.properties').exists()) {
  apply from: '../enc.properties'
}
if (file('../signing/play.json').exists()) {
  apply plugin: 'com.github.triplet.play'
  play {
    serviceAccountCredentials = file("../signing/play.json")
    track = 'internal'
    defaultToAppBundles = true
  }
}

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId "ie.pennylabs.lekkie"
    minSdkVersion 21
    targetSdkVersion 28
    versionCode BuildConst.Version.code
    versionName BuildConst.Version.name
    archivesBaseName = "lekkie-$versionName"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    buildConfigField "String", "BASE_URL", project.properties["base_url"]

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  sourceSets {
    androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
  }

  signingConfigs {
    debug {
      storeFile file('../signing/debug.keystore')
    }
    if (file('../signing/release.keystore').exists()) {
      release {
        storeFile file(Keystore.RELEASE_STORE)
        storePassword Keystore.STORE_PASSWORD
        keyAlias Keystore.KEY_ALIAS
        keyPassword Keystore.KEY_PASSWORD
      }
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
      applicationIdSuffix '.debug'
      manifestPlaceholders = [google_maps_key: project.properties["debug_map_key"]]
    }

    release {
      if (file('../signing/release.keystore').exists()) {
        signingConfig signingConfigs.release
      } else {
        signingConfig signingConfigs.debug
      }
      postprocessing {
        proguardFiles 'proguard-rules.pro'
        removeUnusedResources = true
        removeUnusedCode = true
        optimizeCode = true
        obfuscate = false
      }
      manifestPlaceholders = [google_maps_key: project.properties["release_map_key"]]
    }
  }

  packagingOptions {
    exclude 'META-INF/main.kotlin_module'
  }

  lintOptions {
    lintConfig file("../quality/lint-config.xml")
  }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$Deps.kotlin"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$Deps.coroutines"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$Deps.coroutines"

  implementation 'androidx.core:core-ktx:1.0.1'
  implementation 'com.google.android.material:material:1.1.0-alpha02'
  implementation 'androidx.appcompat:appcompat:1.0.2'
  implementation 'androidx.recyclerview:recyclerview:1.0.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
  implementation "androidx.lifecycle:lifecycle-livedata:2.0.0"
  implementation 'com.google.android.gms:play-services-maps:16.0.0'
  implementation "androidx.room:room-runtime:$Deps.arch_room"
  kapt "androidx.room:room-compiler:$Deps.arch_room"

  implementation "com.google.dagger:dagger:$Deps.dagger"
  implementation "com.google.dagger:dagger-android:$Deps.dagger"
  implementation "com.google.dagger:dagger-android-support:$Deps.dagger"
  kapt "com.google.dagger:dagger-compiler:$Deps.dagger"
  kapt "com.google.dagger:dagger-android-processor:$Deps.dagger"

  implementation "com.squareup.retrofit2:retrofit:$Deps.retrofit2"
  implementation "com.squareup.retrofit2:converter-moshi:$Deps.retrofit2"
  implementation "com.squareup.okhttp3:okhttp:$Deps.okhttp3"
  implementation "com.squareup.okhttp3:logging-interceptor:$Deps.okhttp3"
  implementation 'ru.gildor.coroutines:kotlin-coroutines-retrofit:0.13.0-eap13'
  debugImplementation "com.squareup.okhttp3:mockwebserver:$Deps.okhttp3"

  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'

  implementation 'com.google.firebase:firebase-analytics:16.0.6'
  implementation 'com.google.firebase:firebase-core:16.0.6'
  implementation 'com.google.firebase:firebase-perf:16.2.3'
  implementation 'com.crashlytics.sdk.android:crashlytics:2.9.8'

  testImplementation 'junit:junit:4.12'
  testImplementation 'com.squareup.assertj:assertj-android:1.2.0'
  testImplementation("org.threeten:threetenbp:1.3.6") {
    exclude group: "com.jakewharton.threetenabp", module: "threetenabp"
  }
  androidTestImplementation 'androidx.test:runner:1.1.1'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

check.dependsOn rootProject.detektCheck

task prepareNextRelease {
  description "Prepares the project for the next release version, see: RELEASING.md"

  doLast {
    def new_version = project.android.defaultConfig.versionName

    // 7. Create a new release branch `git checkout -b release-{versionName}`
    exec { commandLine 'git', 'checkout', '-b', "release-$new_version" }

    exec {
      // 8. Update previous `CHANGELOG.md` entry to append title with the build commit of that release
      commandLine 'sed', '-i', "", '-e', "1 s/\$/ - ${BuildConst.Git.shortHash}/", file('../CHANGELOG.md')
    }

    // 9. Commit changes `git commit -am 'bump version to {versionName}'`
    exec { commandLine 'git', 'commit', '-am', "bump version to $new_version" }
  }
}

task generateChangelog {
  description "Generate a changelog based on the range of commits that triggered a build on CircleCI."

  doLast {
    exec {
      def commitRange = System.getenv("CIRCLE_COMPARE_URL").split("/").last()
      if (commitRange.isEmpty()) commitRange = System.getenv("CIRCLE_SHA1")
      if (!commitRange.contains("...")) commitRange = "HEAD^..$commitRange"
      println("COMMIT_RANGE -> $commitRange")

      commandLine 'git', 'log', '--pretty=- %s', "$commitRange"
      standardOutput = new FileOutputStream('app/src/main/play/release-notes/en-GB/internal.txt')
    }
  }
}

kapt {
  useBuildCache = true
}

androidExtensions {
  experimental = true
}

if (file('google-services.json').exists()) {
  apply plugin: 'io.fabric'
  apply plugin: 'com.google.firebase.firebase-perf'
  apply plugin: 'com.google.gms.google-services'
}